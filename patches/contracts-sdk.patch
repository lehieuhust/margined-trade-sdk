diff --git a/packages/contracts-sdk/src/MarginedEngine.client.ts b/packages/contracts-sdk/src/MarginedEngine.client.ts
index 234ea8e..d80fc50 100644
--- a/packages/contracts-sdk/src/MarginedEngine.client.ts
+++ b/packages/contracts-sdk/src/MarginedEngine.client.ts
@@ -151,22 +151,33 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
     this.positionWithFundingPayment = this.positionWithFundingPayment.bind(this);
     this.lastPositionId = this.lastPositionId.bind(this);
   }
-
+   /**
+   * Returns the contracts configuration.
+   */
   config = async (): Promise<ConfigResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       config: {}
     });
   };
+ /**
+  * Returns the state variables of the contract.
+  */
   state = async (): Promise<StateResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       state: {}
     });
   };
+  /**
+  * Returns the pauser of the contract.
+  */
   getPauser = async (): Promise<PauserResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       get_pauser: {}
     });
   };
+  /**
+  * Check a trader is in whitelist.
+  */
   isWhitelisted = async ({
     address
   }: {
@@ -178,11 +189,17 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+   * Returns whitelist that can by pass some trader's restrictions.
+   */
   getWhitelist = async (): Promise<HooksResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       get_whitelist: {}
     });
   };
+  /**
+  * Returns a user's position for a specific vAMM.
+  */
   position = async ({
     positionId,
     vamm
@@ -197,6 +214,9 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+   * Returns a user's positions for all vAMMs.
+   */
   allPositions = async ({
     limit,
     orderBy,
@@ -283,6 +303,9 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+  * Returns the unrealized PnL (profit and loss) of a user for a specific vAMM using a specific calculation method.
+  */
   unrealizedPnl = async ({
     calcOption,
     positionId,
@@ -300,6 +323,9 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+   * Returns the cumulative premium fraction of a vAMM.
+   */
   cumulativePremiumFraction = async ({
     vamm
   }: {
@@ -311,6 +337,9 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+  * Returns the margin ratio of a user for a vAMM.
+  */
   marginRatio = async ({
     positionId,
     vamm
@@ -342,6 +371,9 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+  * Returns the excess collateral a user has for a vAMM.
+  */
   freeCollateral = async ({
     positionId,
     vamm
@@ -356,6 +388,9 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+  * Returns a user's margin balance across all vAMMs inclusive funding payments.
+  */
   balanceWithFundingPayment = async ({
     positionId
   }: {
@@ -367,6 +402,9 @@ export class MarginedEngineQueryClient implements MarginedEngineReadOnlyInterfac
       }
     });
   };
+  /**
+  * Returns a user's margin balance inclusive funding payments for a specific vAMM.
+  */
   positionWithFundingPayment = async ({
     positionId,
     vamm
@@ -508,6 +546,23 @@ export interface MarginedEngineInterface extends MarginedEngineReadOnlyInterface
     pause: boolean;
   }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
 }
+/**
+* The margin engine is responsible for managing user positions and collateral. Allows users to take positions in all registered vAMMs.
+* 
+* ```ts
+* const client = isSimulate 
+* ? new SimulateCosmWasmClient({
+*   chainId: 'Oraichain',
+*   bech32Prefix: 'orai'
+* })
+* : await SigningCosmWasmClient.connectWithSigner('https://rpc.orai.io', await keplr.getOfflineSignerAuto('Oraichain'), {
+*   prefix: 'orai',
+*   gasPrice: GasPrice.fromString(`0.002orai`)
+* });
+* 
+* const engineClient = new MarginedEngineClient(client);
+* ```
+*/
 export class MarginedEngineClient extends MarginedEngineQueryClient implements MarginedEngineInterface {
   client: SigningCosmWasmClient;
   sender: string;
@@ -532,7 +587,15 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
     this.withdrawMargin = this.withdrawMargin.bind(this);
     this.setPause = this.setPause.bind(this);
   }
-
+/**
+ * Enables owner to update key contract parameters.
+ * ```ts
+ * await engineClient.updateConfig({ 
+ *   tollRatio: '5000', 
+ *   spreadRatio: '5000' 
+ * })
+ * ```
+ */
   updateConfig = async ({
     feePool,
     initialMarginRatio,
@@ -598,6 +661,31 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, _fee, _memo, _funds);
   };
+  /**
+ * Enables a user to open a position for a specific vAMM with leverage. Also allows order to be placed with slippage limits.
+ * 
+ * If side is buy (direction is 'add_to_amm') then open position (increase)
+ * 
+ * ![Open Position Increase](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/open-pos-increase.png)
+ * 
+ * If old position is larger then reduce position (decrease)
+ * 
+ * ![Open Position Decrease](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/open-pos-decrease.png)
+ * 
+ * Otherwise close position then swap out the entire position (reverse)
+ * 
+ * ![Open Position Reverse](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/open-pos-reverse.png)
+ * 
+ * ```ts
+ * await engineClient.openPosition({
+ *   vamm: vammClient.contractAddress,
+ *   side: 'buy',
+ *   marginAmount: '10000000',
+ *   leverage: '8000000',
+ *   baseAssetLimit: '4000000'
+ * })
+ * ```   
+ */
   openPosition = async ({
     baseAssetLimit,
     leverage,
@@ -647,6 +735,22 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, _fee, _memo, _funds);
   };
+  /**
+ * Enables a user to close a position they have for a specific vAMM including slippage limits.
+ * 
+ * ![Close Position](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/close-pos-partial.png)
+ * 
+ * If `partial_liquidation_ratio == 1` then close the whole position
+ * 
+ * ![Close Whole Position](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/close-pos-whole.png)
+ * 
+ * ```ts
+ * await engineClient.closePosition({
+ *   vamm: vammClient.contractAddress,
+ *   quoteAssetLimit: '0'
+ * });
+ * ```   
+ */
   closePosition = async ({
     positionId,
     quoteAssetLimit,
@@ -681,6 +785,23 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, _fee, _memo, _funds);
   };
+  /***
+ * Allows third parties to liquidate users positions when they are no longer sufficiently collateralised.
+ * 
+ * ![Liquidate Position](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/liq-pos-partial.png)
+ * 
+ * If `partial_liquidation_ratio == 0` then liquidate the whole position.
+ * 
+ * ![Liquidate Whole Position](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/liq-pos-whole.png)
+ * 
+ * ```ts
+ * await engineClient.liquidate({
+ *   vamm: vammClient.contractAddress,
+ *   trader: "orai...",
+ *   quoteAssetLimit: '0'
+ * });
+ * ```
+ */
   liquidate = async ({
     positionId,
     quoteAssetLimit,
@@ -698,6 +819,19 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, _fee, _memo, _funds);
   };
+  /***
+ * Allows third parties to trigger funding payments to be processed for a specific vAMM.
+ * 
+ * The funding rate helps keep the perp price in line with the underlying asset's spot price. When the perp trades at a premium, longs pay shorts. Conversely, at a discount, shorts pay longs. Although the funding rate can take place at any cadence, it is generally set to one hour. If a perp trades at a 0.1% discount for 24 hours, purchasers of that perp will receive 0.1% as the summation of the 24 funding period.
+ * 
+ * ![Pay Funding](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/pay-funding.png)
+ * 
+ * ```ts
+ * await engineContract.payFunding({ 
+ *   vamm: vammContract.contractAddress 
+ * });
+ * ```
+ */
   payFunding = async ({
     vamm
   }: {
@@ -709,6 +843,18 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, _fee, _memo, _funds);
   };
+  /***
+ * Users can deposit additional margin to their positions to prevent them from becoming under-collateralised.
+ * 
+ * ![Deposit Margin](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/add-margin.png)
+ * 
+ * ```ts
+ * await engineClient.depositMargin({ 
+ *   amount: '500000000', 
+ *   vamm: vammClient.contractAddress 
+ * });
+ * ```
+ */
   depositMargin = async ({
     amount,
     positionId,
@@ -726,6 +872,18 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, _fee, _memo, _funds);
   };
+  /**
+ * Users can withdraw excess collateral from their positions if they are over-collateralised
+ * 
+ * ![Withdraw Margin](https://github.com/oraichain/perpetuals/raw/main/doc/diagrams/remove-margin.png)
+ * 
+ * ```ts
+ * await engineClient.withdrawMargin({ 
+ *   amount: '500000000', 
+ *   vamm: vammClient.contractAddress 
+ * });
+ * ```
+ */
   withdrawMargin = async ({
     amount,
     positionId,
@@ -743,6 +901,15 @@ export class MarginedEngineClient extends MarginedEngineQueryClient implements M
       }
     }, _fee, _memo, _funds);
   };
+  /**
+ * Enables owner to pause contracts in emergency situations   
+ * 
+ * ```ts
+ * await engineClient.setPause({
+ *   pause: true
+ * }); 
+ * ``
+ */
   setPause = async ({
     pause
   }: {
diff --git a/packages/contracts-sdk/src/MarginedFeePool.client.ts b/packages/contracts-sdk/src/MarginedFeePool.client.ts
index b41c3ee..4f7cf0e 100644
--- a/packages/contracts-sdk/src/MarginedFeePool.client.ts
+++ b/packages/contracts-sdk/src/MarginedFeePool.client.ts
@@ -37,17 +37,25 @@ export class MarginedFeePoolQueryClient implements MarginedFeePoolReadOnlyInterf
     this.getTokenLength = this.getTokenLength.bind(this);
     this.getTokenList = this.getTokenList.bind(this);
   }
-
+  /**
+  * Returns contract parameters.
+  */
   config = async (): Promise<ConfigResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       config: {}
     });
   };
+  /**
+  * Returns contract owner
+  */
   getOwner = async (): Promise<OwnerResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       get_owner: {}
     });
   };
+  /**
+  * Returns bool showing if token is accepted as fees.
+  */
   isToken = async ({
     token
   }: {
@@ -59,11 +67,17 @@ export class MarginedFeePoolQueryClient implements MarginedFeePoolReadOnlyInterf
       }
     });
   };
+  /**
+  * Returns number of tokens accepted as fees.
+  */
   getTokenLength = async (): Promise<TokenLengthResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       get_token_length: {}
     });
   };
+  /**
+  * Returns list of fee tokens.
+  */
   getTokenList = async ({
     limit
   }: {
@@ -104,6 +118,9 @@ export interface MarginedFeePoolInterface extends MarginedFeePoolReadOnlyInterfa
     token: string;
   }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
 }
+/**
++ * The Fee Pool is simply a contract that accrues the fees generated by the protocol.
++ */
 export class MarginedFeePoolClient extends MarginedFeePoolQueryClient implements MarginedFeePoolInterface {
   client: SigningCosmWasmClient;
   sender: string;
@@ -119,7 +136,9 @@ export class MarginedFeePoolClient extends MarginedFeePoolQueryClient implements
     this.removeToken = this.removeToken.bind(this);
     this.sendToken = this.sendToken.bind(this);
   }
-
+  /**
+  * Transfers the contract owner.   
+  */
   updateOwner = async ({
     owner
   }: {
@@ -131,6 +150,9 @@ export class MarginedFeePoolClient extends MarginedFeePoolQueryClient implements
       }
     }, _fee, _memo, _funds);
   };
+  /**   
+  * Append token to be accepted for fee payments.
+  */
   addToken = async ({
     token
   }: {
@@ -142,6 +164,9 @@ export class MarginedFeePoolClient extends MarginedFeePoolQueryClient implements
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Remove token that is to be accepted for fee payments.
+  */
   removeToken = async ({
     token
   }: {
@@ -153,6 +178,9 @@ export class MarginedFeePoolClient extends MarginedFeePoolQueryClient implements
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Transfer tokens held by fee pool to a recipient address.
+  */
   sendToken = async ({
     amount,
     recipient,
diff --git a/packages/contracts-sdk/src/MarginedInsuranceFund.client.ts b/packages/contracts-sdk/src/MarginedInsuranceFund.client.ts
index 5cd27ff..d742f20 100644
--- a/packages/contracts-sdk/src/MarginedInsuranceFund.client.ts
+++ b/packages/contracts-sdk/src/MarginedInsuranceFund.client.ts
@@ -47,17 +47,25 @@ export class MarginedInsuranceFundQueryClient implements MarginedInsuranceFundRe
     this.getAllVammStatus = this.getAllVammStatus.bind(this);
     this.getVammStatus = this.getVammStatus.bind(this);
   }
-
+/**
+  * Returns contract parameters.
+  */
   config = async (): Promise<ConfigResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       config: {}
     });
   };
+  /**
+  * Returns the owner of the contract.
+  */
   getOwner = async (): Promise<OwnerResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       get_owner: {}
     });
   };
+  /**
+  * Returns bool showing if vamm is supported.
+  */
   isVamm = async ({
     vamm
   }: {
@@ -69,6 +77,9 @@ export class MarginedInsuranceFundQueryClient implements MarginedInsuranceFundRe
       }
     });
   };
+  /**
+  * Returns list of supported vAMMs.
+  */
   getAllVamm = async ({
     limit
   }: {
@@ -80,6 +91,9 @@ export class MarginedInsuranceFundQueryClient implements MarginedInsuranceFundRe
       }
     });
   };
+  /**
+  * Returns the status of all vAMMs supported.
+  */
   getAllVammStatus = async ({
     limit
   }: {
@@ -91,6 +105,9 @@ export class MarginedInsuranceFundQueryClient implements MarginedInsuranceFundRe
       }
     });
   };
+  /**
+  * Returns the status of a specific vAMM.
+  */
   getVammStatus = async ({
     vamm
   }: {
@@ -130,6 +147,9 @@ export interface MarginedInsuranceFundInterface extends MarginedInsuranceFundRea
   }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
   shutdownVamms: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
 }
+/**
++ * Insurance fund contains funds that are used to cover shortfall(slippage) in funding payments, additionally insurance fund accrues a portion of transaction fees and profits.
++ */
 export class MarginedInsuranceFundClient extends MarginedInsuranceFundQueryClient implements MarginedInsuranceFundInterface {
   client: SigningCosmWasmClient;
   sender: string;
@@ -146,7 +166,9 @@ export class MarginedInsuranceFundClient extends MarginedInsuranceFundQueryClien
     this.withdraw = this.withdraw.bind(this);
     this.shutdownVamms = this.shutdownVamms.bind(this);
   }
-
+/**
+  * Enables transfer of contract ownership and the beneficiary of insurance funds. Beneficiary is an address that is able to request funds held by the insurance fund contract.
+  */
   updateOwner = async ({
     owner
   }: {
@@ -158,6 +180,9 @@ export class MarginedInsuranceFundClient extends MarginedInsuranceFundQueryClien
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Append vamm to list of supported vAMMs.
+  */
   addVamm = async ({
     vamm
   }: {
@@ -169,6 +194,9 @@ export class MarginedInsuranceFundClient extends MarginedInsuranceFundQueryClien
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Remove vamm from list of supported vAMMs.
+  */
   removeVamm = async ({
     vamm
   }: {
@@ -180,6 +208,9 @@ export class MarginedInsuranceFundClient extends MarginedInsuranceFundQueryClien
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Enables the beneficiary to request contract funds.
+  */
   withdraw = async ({
     amount,
     token
@@ -194,6 +225,9 @@ export class MarginedInsuranceFundClient extends MarginedInsuranceFundQueryClien
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Emergency shutdown function that halts all vAMMs trading.
+  */
   shutdownVamms = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
     return await this.client.execute(this.sender, this.contractAddress, {
       shutdown_vamms: {}
diff --git a/packages/contracts-sdk/src/MarginedPricefeed.client.ts b/packages/contracts-sdk/src/MarginedPricefeed.client.ts
index daf0cae..3d6f807 100644
--- a/packages/contracts-sdk/src/MarginedPricefeed.client.ts
+++ b/packages/contracts-sdk/src/MarginedPricefeed.client.ts
@@ -45,17 +45,25 @@ export class MarginedPricefeedQueryClient implements MarginedPricefeedReadOnlyIn
     this.getPreviousPrice = this.getPreviousPrice.bind(this);
     this.getTwapPrice = this.getTwapPrice.bind(this);
   }
-
+/**
+  * Returns contract parameters.
+  */
   config = async (): Promise<ConfigResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       config: {}
     });
   };
+  /**
+  * Returns the owner of the contract.
+  */
   getOwner = async (): Promise<OwnerResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       get_owner: {}
     });
   };
+  /**
+  * Returns latest price submitted to the contract.
+  */
   getPrice = async ({
     key
   }: {
@@ -67,6 +75,9 @@ export class MarginedPricefeedQueryClient implements MarginedPricefeedReadOnlyIn
       }
     });
   };
+  /**
+  * Returns a price submitted in a previous round.
+  */
   getPreviousPrice = async ({
     key,
     numRoundBack
@@ -81,6 +92,9 @@ export class MarginedPricefeedQueryClient implements MarginedPricefeedReadOnlyIn
       }
     });
   };
+  /**
+  * Returns a twap of the prices submitted to the contract.
+  */
   getTwapPrice = async ({
     interval,
     key
@@ -123,6 +137,9 @@ export interface MarginedPricefeedInterface extends MarginedPricefeedReadOnlyInt
     owner: string;
   }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
 }
+/**
++ * The price feed performs TWAP of data retrieved from the data oracles for use throughout the protocol.
++ */
 export class MarginedPricefeedClient extends MarginedPricefeedQueryClient implements MarginedPricefeedInterface {
   client: SigningCosmWasmClient;
   sender: string;
@@ -137,7 +154,9 @@ export class MarginedPricefeedClient extends MarginedPricefeedQueryClient implem
     this.appendMultiplePrice = this.appendMultiplePrice.bind(this);
     this.updateOwner = this.updateOwner.bind(this);
   }
-
+/**
+  * Store on-chain price oracles in the contract storage, will be replaced by oracle contract in later version.
+  */
   appendPrice = async ({
     key,
     price,
@@ -155,6 +174,9 @@ export class MarginedPricefeedClient extends MarginedPricefeedQueryClient implem
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Store multiple on-chain price oracles in the contract storage, will be replaced by oracle contract in later version.
+  */
   appendMultiplePrice = async ({
     key,
     prices,
@@ -172,6 +194,9 @@ export class MarginedPricefeedClient extends MarginedPricefeedQueryClient implem
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Transfers the contract owner.
+  */
   updateOwner = async ({
     owner
   }: {
diff --git a/packages/contracts-sdk/src/MarginedVamm.client.ts b/packages/contracts-sdk/src/MarginedVamm.client.ts
index 0741bae..42b37c1 100644
--- a/packages/contracts-sdk/src/MarginedVamm.client.ts
+++ b/packages/contracts-sdk/src/MarginedVamm.client.ts
@@ -105,22 +105,33 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
     this.isOverSpreadLimit = this.isOverSpreadLimit.bind(this);
     this.isOverFluctuationLimit = this.isOverFluctuationLimit.bind(this);
   }
-
+/**
+  * Returns contract configuration.
+  */
   config = async (): Promise<ConfigResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       config: {}
     });
   };
+  /**
+  * Returns contract state, including liquidity etc.
+  */
   state = async (): Promise<StateResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       state: {}
     });
   };
+  /**
+  * Returns the owner of the contract.
+  */
   getOwner = async (): Promise<OwnerResponse> => {
     return this.client.queryContractSmart(this.contractAddress, {
       get_owner: {}
     });
   };
+  /**
+  * Returns the average price for a trade of a given size.
+  */
   inputPrice = async ({
     amount,
     direction
@@ -135,6 +146,9 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns the average price for a trade of a given size.
+  */
   outputPrice = async ({
     amount,
     direction
@@ -149,6 +163,9 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns the amount for a trade of input with a given size.
+  */
   inputAmount = async ({
     amount,
     direction
@@ -163,6 +180,9 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns the amount for a trade of output with a given size.
+  */
   outputAmount = async ({
     amount,
     direction
@@ -177,6 +197,9 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns input twap price of the vAMM, using the reserve snapshots, default 15 minutes interval.
+  */
   inputTwap = async ({
     amount,
     direction
@@ -191,6 +214,9 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns output twap price of the vAMM, using the reserve snapshots, default 15 minutes interval.
+  */
   outputTwap = async ({
     amount,
     direction
@@ -205,11 +231,17 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns spot price of the vAMM.
+  */
   spotPrice = async (): Promise<Uint128> => {
     return this.client.queryContractSmart(this.contractAddress, {
       spot_price: {}
     });
   };
+  /**
+  * Return twap price of the vAMM, using the reserve snapshots.
+  */
   twapPrice = async ({
     interval
   }: {
@@ -221,11 +253,17 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns latest price from PriceFeed contract.
+  */
   underlyingPrice = async (): Promise<Uint128> => {
     return this.client.queryContractSmart(this.contractAddress, {
       underlying_price: {}
     });
   };
+  /**
+  * Returns a twap price from PriceFeed contract.
+  */
   underlyingTwapPrice = async ({
     interval
   }: {
@@ -237,6 +275,9 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns the total (i.e. toll + spread) fees for an amount.
+  */
   calcFee = async ({
     quoteAssetAmount
   }: {
@@ -248,11 +289,17 @@ export class MarginedVammQueryClient implements MarginedVammReadOnlyInterface {
       }
     });
   };
+  /**
+  * Returns bool to show is spread limit has been exceeded.
+  */
   isOverSpreadLimit = async (): Promise<Boolean> => {
     return this.client.queryContractSmart(this.contractAddress, {
       is_over_spread_limit: {}
     });
   };
+  /**
+  * Returns bool to show is fluctuation limit has been exceeded.
+  */
   isOverFluctuationLimit = async ({
     baseAssetAmount,
     direction
@@ -328,6 +375,9 @@ export interface MarginedVammInterface extends MarginedVammReadOnlyInterface {
     open: boolean;
   }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
 }
+/**
++ * The vAMM is the contract that enables user's to take perpetual positions through its "virtual" automated market maker.
++ */
 export class MarginedVammClient extends MarginedVammQueryClient implements MarginedVammInterface {
   client: SigningCosmWasmClient;
   sender: string;
@@ -345,7 +395,15 @@ export class MarginedVammClient extends MarginedVammQueryClient implements Margi
     this.settleFunding = this.settleFunding.bind(this);
     this.setOpen = this.setOpen.bind(this);
   }
-
+/**
+  * Enables owner to update key contract parameters.
+  * 
+  * ```ts
+  * vammContract.updateConfig({
+  *  tollRatio: '0'
+  * });
+  * 
+  */
   updateConfig = async ({
     baseAssetHoldingCap,
     fluctuationLimitRatio,
@@ -381,6 +439,9 @@ export class MarginedVammClient extends MarginedVammQueryClient implements Margi
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Transfers the contract owner.
+  */
   updateOwner = async ({
     owner
   }: {
@@ -392,6 +453,9 @@ export class MarginedVammClient extends MarginedVammQueryClient implements Margi
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Allows the margin engine to swap quote asset into the vAMM.
+  */
   swapInput = async ({
     baseAssetLimit,
     canGoOverFluctuation,
@@ -415,6 +479,9 @@ export class MarginedVammClient extends MarginedVammQueryClient implements Margi
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Allows the margin engine to swap base asset into the vAMM.
+  */
   swapOutput = async ({
     baseAssetAmount,
     direction,
@@ -435,11 +502,17 @@ export class MarginedVammClient extends MarginedVammQueryClient implements Margi
       }
     }, _fee, _memo, _funds);
   };
+  /**
+  * Calculates the funding payments due.
+  */
   settleFunding = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
     return await this.client.execute(this.sender, this.contractAddress, {
       settle_funding: {}
     }, _fee, _memo, _funds);
   };
+  /**
+  * Allows owner to open the vAMM enable positions to be taken.
+  */
   setOpen = async ({
     open
   }: {
diff --git a/packages/contracts-sdk/src/MarginedVamm.types.ts b/packages/contracts-sdk/src/MarginedVamm.types.ts
index 80e73cb..9e0a4f5 100644
--- a/packages/contracts-sdk/src/MarginedVamm.types.ts
+++ b/packages/contracts-sdk/src/MarginedVamm.types.ts
@@ -1,4 +1,7 @@
 import {Uint128, Direction, Addr, Boolean, Integer} from "./types";
+/**
+  * The instantiation message takes the decimals to be used by the contract, the addresses of the pricefeed and margin engine contracts. It also takes the definition of the product pair to be traded on the vAMM including the initial liquidity.
+  */
 export interface InstantiateMsg {
   base_asset: string;
   base_asset_reserve: Uint128;
